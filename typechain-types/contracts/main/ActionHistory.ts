/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace ActionHistory {
  export type ActionStruct = {
    owner: PromiseOrValue<string>;
    secretary: PromiseOrValue<string>;
    actionId: PromiseOrValue<BigNumberish>;
    standardMetadata: PromiseOrValue<BytesLike>;
    optionalMetadata: PromiseOrValue<string>;
    status: PromiseOrValue<BigNumberish>;
  };

  export type ActionStructOutput = [
    string,
    string,
    BigNumber,
    string,
    string,
    number
  ] & {
    owner: string;
    secretary: string;
    actionId: BigNumber;
    standardMetadata: string;
    optionalMetadata: string;
    status: number;
  };
}

export interface ActionHistoryInterface extends utils.Interface {
  functions: {
    "ActionRegistory()": FunctionFragment;
    "ActionStandardRegistory()": FunctionFragment;
    "getHistoryById(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "register((address,address,uint256,bytes,string,uint8))": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateHistoryStatus(uint256,uint8)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ActionRegistory"
      | "ActionStandardRegistory"
      | "getHistoryById"
      | "owner"
      | "register"
      | "renounceOwnership"
      | "transferOwnership"
      | "updateHistoryStatus"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ActionRegistory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ActionStandardRegistory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getHistoryById",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "register",
    values: [ActionHistory.ActionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateHistoryStatus",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "ActionRegistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ActionStandardRegistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHistoryById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateHistoryStatus",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ActionHistory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ActionHistoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ActionRegistory(overrides?: CallOverrides): Promise<[string]>;

    ActionStandardRegistory(overrides?: CallOverrides): Promise<[string]>;

    getHistoryById(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ActionHistory.ActionStructOutput]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    register(
      action: ActionHistory.ActionStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateHistoryStatus(
      id: PromiseOrValue<BigNumberish>,
      status: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  ActionRegistory(overrides?: CallOverrides): Promise<string>;

  ActionStandardRegistory(overrides?: CallOverrides): Promise<string>;

  getHistoryById(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ActionHistory.ActionStructOutput>;

  owner(overrides?: CallOverrides): Promise<string>;

  register(
    action: ActionHistory.ActionStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateHistoryStatus(
    id: PromiseOrValue<BigNumberish>,
    status: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ActionRegistory(overrides?: CallOverrides): Promise<string>;

    ActionStandardRegistory(overrides?: CallOverrides): Promise<string>;

    getHistoryById(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ActionHistory.ActionStructOutput>;

    owner(overrides?: CallOverrides): Promise<string>;

    register(
      action: ActionHistory.ActionStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateHistoryStatus(
      id: PromiseOrValue<BigNumberish>,
      status: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    ActionRegistory(overrides?: CallOverrides): Promise<BigNumber>;

    ActionStandardRegistory(overrides?: CallOverrides): Promise<BigNumber>;

    getHistoryById(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    register(
      action: ActionHistory.ActionStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateHistoryStatus(
      id: PromiseOrValue<BigNumberish>,
      status: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ActionRegistory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ActionStandardRegistory(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getHistoryById(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    register(
      action: ActionHistory.ActionStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateHistoryStatus(
      id: PromiseOrValue<BigNumberish>,
      status: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
