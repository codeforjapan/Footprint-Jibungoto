/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IActionRegistory {
  export type ActionStruct = {
    account: PromiseOrValue<string>;
    standardId: PromiseOrValue<BigNumberish>;
    name: PromiseOrValue<string>;
    description: PromiseOrValue<string>;
    status: PromiseOrValue<BigNumberish>;
  };

  export type ActionStructOutput = [
    string,
    BigNumber,
    string,
    string,
    number
  ] & {
    account: string;
    standardId: BigNumber;
    name: string;
    description: string;
    status: number;
  };
}

export interface IActionRegistoryInterface extends utils.Interface {
  functions: {
    "actionCounter()": FunctionFragment;
    "actionStandardRegistory()": FunctionFragment;
    "allowance(address,uint256)": FunctionFragment;
    "getActionById(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "actionCounter"
      | "actionStandardRegistory"
      | "allowance"
      | "getActionById"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "actionCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "actionStandardRegistory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getActionById",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "actionCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "actionStandardRegistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getActionById",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IActionRegistory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IActionRegistoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    actionCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    actionStandardRegistory(overrides?: CallOverrides): Promise<[string]>;

    allowance(
      owner: PromiseOrValue<string>,
      actionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getActionById(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IActionRegistory.ActionStructOutput]>;
  };

  actionCounter(overrides?: CallOverrides): Promise<BigNumber>;

  actionStandardRegistory(overrides?: CallOverrides): Promise<string>;

  allowance(
    owner: PromiseOrValue<string>,
    actionId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getActionById(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IActionRegistory.ActionStructOutput>;

  callStatic: {
    actionCounter(overrides?: CallOverrides): Promise<BigNumber>;

    actionStandardRegistory(overrides?: CallOverrides): Promise<string>;

    allowance(
      owner: PromiseOrValue<string>,
      actionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getActionById(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IActionRegistory.ActionStructOutput>;
  };

  filters: {};

  estimateGas: {
    actionCounter(overrides?: CallOverrides): Promise<BigNumber>;

    actionStandardRegistory(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: PromiseOrValue<string>,
      actionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getActionById(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    actionCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    actionStandardRegistory(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: PromiseOrValue<string>,
      actionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getActionById(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
